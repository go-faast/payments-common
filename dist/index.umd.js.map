{"version":3,"file":"index.umd.js","sources":["../src/types.ts","../src/utils.ts","../src/BalanceMonitor.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport {\n  requiredOptionalCodec,\n  extendCodec,\n  enumCodec,\n  nullable,\n  DateT,\n  Logger,\n  functionT,\n  Numeric,\n} from '@faast/ts-common'\n\nexport enum NetworkType {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet',\n}\nexport const NetworkTypeT = enumCodec<NetworkType>(NetworkType, 'NetworkType')\n\nexport const BaseConfig = t.partial(\n  {\n    network: NetworkTypeT,\n    logger: Logger,\n  },\n  'BaseConfig',\n)\nexport type BaseConfig = t.TypeOf<typeof BaseConfig>\n\nexport const AddressOrIndex = t.union([t.string, t.number], 'AddressOrIndex')\nexport type AddressOrIndex = t.TypeOf<typeof AddressOrIndex>\n\nexport enum FeeLevel {\n  Custom = 'custom',\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\nexport const FeeLevelT = enumCodec<FeeLevel>(FeeLevel, 'FeeLevel')\n\nexport enum FeeRateType {\n  Main = 'main', // ie bitcoins, ethers\n  Base = 'base', // ie satoshis, wei\n  BasePerWeight = 'base/weight', // ie satoshis per byte, gas price (wei per gas)\n}\nexport const FeeRateTypeT = enumCodec<FeeRateType>(FeeRateType, 'FeeRateType')\n\nexport const FeeOptionCustom = requiredOptionalCodec(\n  {\n    feeRate: t.string,\n    feeRateType: FeeRateTypeT,\n  },\n  {\n    feeLevel: t.literal(FeeLevel.Custom),\n  },\n  'FeeOptionCustom',\n)\n\nexport const FeeOptionLevel = t.partial(\n  {\n    feeLevel: t.union([t.literal(FeeLevel.High), t.literal(FeeLevel.Medium), t.literal(FeeLevel.Low)]),\n  },\n  'FeeOptionLevel',\n)\n\nexport const FeeOption = t.union([FeeOptionCustom, FeeOptionLevel], 'FeeOption')\nexport type FeeOption = t.TypeOf<typeof FeeOption>\n\nexport const CreateTransactionOptions = extendCodec(\n  FeeOption,\n  {},\n  {\n    sequenceNumber: t.number,\n    payportBalance: Numeric,\n  },\n  'CreateTransactionOptions',\n)\nexport type CreateTransactionOptions = t.TypeOf<typeof CreateTransactionOptions>\n\nexport const ResolvedFeeOption = t.type({\n  targetFeeLevel: FeeLevelT,\n  targetFeeRate: t.string,\n  targetFeeRateType: FeeRateTypeT,\n  feeBase: t.string,\n  feeMain: t.string,\n})\nexport type ResolvedFeeOption = t.TypeOf<typeof ResolvedFeeOption>\n\nexport const BalanceResult = t.type(\n  {\n    confirmedBalance: t.string, // balance with at least 1 confirmation\n    unconfirmedBalance: t.string, // balance that is pending confirmation\n    sweepable: t.boolean, // balance is high enough to be swept\n  },\n  'BalanceResult',\n)\nexport type BalanceResult = t.TypeOf<typeof BalanceResult>\n\nexport enum TransactionStatus {\n  Unsigned = 'unsigned',\n  Signed = 'signed',\n  Pending = 'pending',\n  Confirmed = 'confirmed',\n  Failed = 'failed',\n}\nexport const TransactionStatusT = enumCodec<TransactionStatus>(TransactionStatus, 'TransactionStatus')\n\nexport const TransactionCommon = requiredOptionalCodec(\n  {\n    status: TransactionStatusT,\n    id: nullable(t.string), // network txid\n    fromAddress: nullable(t.string), // sender address\n    toAddress: nullable(t.string), // recipient address\n    fromIndex: nullable(t.number), // sender address index\n    toIndex: nullable(t.number), // recipient address index, null if not ours\n    amount: nullable(t.string), // main denomination (eg \"0.125\")\n    fee: nullable(t.string), // total fee in main denomination\n    sequenceNumber: nullable(t.number), // eg Ethereum nonce or ripple sequence\n  },\n  {\n    fromExtraId: nullable(t.string), // eg ripple sender tag\n    toExtraId: nullable(t.string), // eg Monero payment ID or ripple destination tag\n  },\n  'TransactionCommon',\n)\nexport type TransactionCommon = t.TypeOf<typeof TransactionCommon>\n\nconst UnsignedCommon = extendCodec(\n  TransactionCommon,\n  {\n    fromAddress: t.string,\n    toAddress: t.string,\n    fromIndex: t.number,\n    targetFeeLevel: FeeLevelT,\n    targetFeeRate: nullable(t.string),\n    targetFeeRateType: nullable(FeeRateTypeT),\n  },\n  'UnsignedCommon',\n)\ntype UnsignedCommon = t.TypeOf<typeof UnsignedCommon>\n\nexport const BaseUnsignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal(TransactionStatus.Unsigned),\n    data: t.object,\n  },\n  'BaseUnsignedTransaction',\n)\nexport type BaseUnsignedTransaction = t.TypeOf<typeof BaseUnsignedTransaction>\n\nexport const BaseSignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal(TransactionStatus.Signed),\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    data: t.object,\n  },\n  'BaseSignedTransaction',\n)\nexport type BaseSignedTransaction = t.TypeOf<typeof BaseSignedTransaction>\n\nexport const BaseTransactionInfo = extendCodec(\n  TransactionCommon,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    isExecuted: t.boolean, // true if transaction didn't fail (eg TRX/ETH contract succeeded)\n    isConfirmed: t.boolean,\n    confirmations: t.number, // 0 if not confirmed\n    confirmationId: nullable(t.string), // eg block number or hash. null if not confirmed\n    confirmationTimestamp: nullable(DateT), // block timestamp. null if timestamp unavailable or unconfirmed\n    data: t.object,\n  },\n  'BaseTransactionInfo',\n)\nexport type BaseTransactionInfo = t.TypeOf<typeof BaseTransactionInfo>\n\nexport const BaseBroadcastResult = t.type(\n  {\n    id: t.string,\n  },\n  'BaseBroadcastResult',\n)\nexport type BaseBroadcastResult = t.TypeOf<typeof BaseBroadcastResult>\n\nexport const Payport = requiredOptionalCodec(\n  {\n    address: t.string,\n  },\n  {\n    extraId: nullable(t.string),\n  },\n  'Payport',\n)\nexport type Payport = t.TypeOf<typeof Payport>\n\nexport const BalanceActivityType = t.union([t.literal('in'), t.literal('out')], 'BalanceActivityType')\nexport type BalanceActivityType = t.TypeOf<typeof BalanceActivityType>\n\nexport const BalanceActivity = t.type(\n  {\n    type: BalanceActivityType,\n    networkType: NetworkTypeT,\n    networkSymbol: t.string,\n    assetSymbol: t.string,\n    address: t.string,\n    extraId: nullable(t.string),\n    amount: t.string,\n    externalId: t.string,\n    activitySequence: t.string,\n    confirmationId: t.string,\n    confirmationNumber: t.number,\n    timestamp: DateT,\n  },\n  'BalanceActivity',\n)\nexport type BalanceActivity = t.TypeOf<typeof BalanceActivity>\n\nexport const BalanceMonitorConfig = BaseConfig\nexport type BalanceMonitorConfig = t.TypeOf<typeof BalanceMonitorConfig>\n\nexport const GetBalanceActivityOptions = t.partial(\n  {\n    from: t.union([t.number, BalanceActivity]),\n    to: t.union([t.number, BalanceActivity]),\n  },\n  'GetBalanceActivityOptions',\n)\nexport type GetBalanceActivityOptions = t.TypeOf<typeof GetBalanceActivityOptions>\n\nexport type BalanceActivityCallback = (ba: BalanceActivity) => Promise<void> | void\nexport const BalanceActivityCallback = functionT<BalanceActivityCallback>('BalanceActivityCallback')\n\nexport type FromTo = Pick<\n  BaseUnsignedTransaction,\n  'fromAddress' | 'fromIndex' | 'fromExtraId' | 'toAddress' | 'toIndex' | 'toExtraId'\n> & { fromPayport: Payport; toPayport: Payport }\n\nexport const ResolveablePayport = t.union([Payport, t.string, t.number], 'ResolveablePayport')\nexport type ResolveablePayport = t.TypeOf<typeof ResolveablePayport>\n\nexport const RetrieveBalanceActivitiesResult = t.type(\n  {\n    from: t.number,\n    to: t.number,\n  },\n  'RetrieveBalanceActivitiesResult',\n)\nexport type RetrieveBalanceActivitiesResult = t.TypeOf<typeof RetrieveBalanceActivitiesResult>\n","import BigNumber from 'bignumber.js'\nimport { Numeric } from '@faast/ts-common'\n\nexport function createUnitConverters(decimals: number) {\n  const basePerMain = new BigNumber(10).pow(decimals)\n\n  function toMainDenominationBigNumber(baseNumeric: Numeric): BigNumber {\n    const baseUnits = new BigNumber(baseNumeric)\n    if (baseUnits.isNaN()) {\n      throw new Error('Cannot convert to main denomination - not a number')\n    }\n    if (!baseUnits.isFinite()) {\n      throw new Error('Cannot convert to main denomination - not finite')\n    }\n    return baseUnits.div(basePerMain)\n  }\n\n  function toMainDenominationString(baseNumeric: Numeric): string {\n    return toMainDenominationBigNumber(baseNumeric).toString()\n  }\n\n  function toMainDenominationNumber(baseNumeric: Numeric): number {\n    return toMainDenominationBigNumber(baseNumeric).toNumber()\n  }\n\n  function toBaseDenominationBigNumber(mainNumeric: Numeric): BigNumber {\n    const mainUnits = new BigNumber(mainNumeric)\n    if (mainUnits.isNaN()) {\n      throw new Error('Cannot convert to base denomination - not a number')\n    }\n    if (!mainUnits.isFinite()) {\n      throw new Error('Cannot convert to base denomination - not finite')\n    }\n    return mainUnits.times(basePerMain)\n  }\n\n  function toBaseDenominationString(mainNumeric: Numeric): string {\n    return toBaseDenominationBigNumber(mainNumeric).toString()\n  }\n\n  function toBaseDenominationNumber(mainNumeric: Numeric): number {\n    return toBaseDenominationBigNumber(mainNumeric).toNumber()\n  }\n\n  return {\n    toMainDenominationBigNumber,\n    toMainDenominationNumber,\n    toMainDenominationString,\n    toBaseDenominationBigNumber,\n    toBaseDenominationNumber,\n    toBaseDenominationString,\n  }\n}\n","import { Logger, DelegateLogger } from '@faast/ts-common'\n\nimport {\n  NetworkType,\n  BalanceMonitorConfig,\n  BalanceActivityCallback,\n  GetBalanceActivityOptions,\n  RetrieveBalanceActivitiesResult,\n} from './types'\n\nexport abstract class BalanceMonitor {\n  networkType: NetworkType\n  logger: Logger\n\n  constructor(config: BalanceMonitorConfig) {\n    this.networkType = config.network || NetworkType.Mainnet\n    this.logger = new DelegateLogger(config.logger, BalanceMonitor.name)\n  }\n\n  abstract init(): Promise<void>\n\n  abstract subscribeAddresses(addresses: string[]): Promise<void>\n\n  abstract onBalanceActivity(callbackFn: BalanceActivityCallback): void\n\n  abstract retrieveBalanceActivities(\n    address: string,\n    callbackFn: BalanceActivityCallback,\n    options?: GetBalanceActivityOptions,\n  ): Promise<RetrieveBalanceActivitiesResult>\n}\n"],"names":["NetworkType","enumCodec","t.partial","Logger","t.union","t.string","t.number","FeeLevel","FeeRateType","requiredOptionalCodec","t.literal","extendCodec","Numeric","t.type","t.boolean","TransactionStatus","nullable","t.object","DateT","functionT","DelegateLogger"],"mappings":"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"}