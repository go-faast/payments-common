{"version":3,"file":"index.umd.js","sources":["../src/types.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { requiredOptionalCodec, extendCodec, enumCodec, nullable, DateT } from '@faast/ts-common'\n\nexport const AddressOrIndex = t.union([t.string, t.number], 'AddressOrIndex')\nexport type AddressOrIndex = t.TypeOf<typeof AddressOrIndex>\n\nexport enum FeeLevel {\n  Custom = 'custom',\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\nexport const FeeLevelT = enumCodec<FeeLevel>(FeeLevel, 'FeeLevel')\n\nexport enum FeeRateType {\n  Main = 'main', // ie bitcoins, ethers\n  Base = 'base', // ie satoshis, wei\n  BasePerWeight = 'base/weight', // ie satoshis per byte, gas price (wei per gas)\n}\nexport const FeeRateTypeT = enumCodec<FeeRateType>(FeeRateType, 'FeeRateType')\n\nexport const FeeOptionCustom = requiredOptionalCodec(\n  {\n    feeRate: t.string,\n    feeRateType: FeeRateTypeT,\n  },\n  {\n    feeLevel: t.literal(FeeLevel.Custom),\n  },\n  'FeeOptionCustom',\n)\n\nexport const FeeOptionLevel = t.type(\n  {\n    feeLevel: t.union([t.literal(FeeLevel.High), t.literal(FeeLevel.Medium), t.literal(FeeLevel.Low)]),\n  },\n  'FeeOptionLevel',\n)\n\nexport const FeeOption = t.union([FeeOptionCustom, FeeOptionLevel], 'FeeOption')\nexport type FeeOption = t.TypeOf<typeof FeeOption>\n\nexport const CreateTransactionOptions = FeeOption\nexport type CreateTransactionOptions = t.TypeOf<typeof CreateTransactionOptions>\n\nexport const ResolvedFeeOption = t.type({\n  targetFeeLevel: FeeLevelT,\n  targetFeeRate: t.string,\n  targetFeeRateType: FeeRateTypeT,\n  feeBase: t.string,\n  feeMain: t.string,\n})\nexport type ResolvedFeeOption = t.TypeOf<typeof ResolvedFeeOption>\n\nexport const BalanceResult = t.type(\n  {\n    confirmedBalance: t.string, // balance with at least 1 confirmation\n    unconfirmedBalance: t.string, // balance that is pending confirmation\n  },\n  'BalanceResult',\n)\nexport type BalanceResult = t.TypeOf<typeof BalanceResult>\n\nexport enum TransactionStatus {\n  Unsigned = 'unsigned',\n  Signed = 'signed',\n  Pending = 'pending',\n  Confirmed = 'confirmed',\n  Failed = 'failed',\n}\nexport const TransactionStatusT = enumCodec(TransactionStatus, 'TransactionStatus')\n\nexport const TransactionCommon = t.type(\n  {\n    id: nullable(t.string), // network txid\n    fromAddress: nullable(t.string), // sender address\n    toAddress: nullable(t.string), // recipient address\n    toExtraId: nullable(t.string), // eg Monero payment ID\n    fromIndex: nullable(t.number), // sender address index\n    toIndex: nullable(t.number), // recipient address index, null if not ours\n    amount: nullable(t.string), // main denomination (eg \"0.125\")\n    fee: nullable(t.string), // total fee in main denomination\n    status: TransactionStatusT,\n  },\n  'TransactionCommon',\n)\nexport type TransactionCommon = t.TypeOf<typeof TransactionCommon>\n\nconst UnsignedCommon = extendCodec(\n  TransactionCommon,\n  {\n    fromAddress: t.string,\n    toAddress: t.string,\n    fromIndex: t.number,\n    targetFeeLevel: FeeLevelT,\n    targetFeeRate: nullable(t.string),\n    targetFeeRateType: nullable(FeeRateTypeT),\n  },\n  'UnsignedCommon',\n)\n\nexport const BaseUnsignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal('unsigned'),\n    data: t.UnknownRecord,\n  },\n  'BaseUnsignedTransaction',\n)\nexport type BaseUnsignedTransaction = t.TypeOf<typeof BaseUnsignedTransaction>\n\nexport const BaseSignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal('signed'),\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    data: t.UnknownRecord,\n  },\n  'BaseSignedTransaction',\n)\nexport type BaseSignedTransaction = t.TypeOf<typeof BaseSignedTransaction>\n\nexport const BaseTransactionInfo = extendCodec(\n  TransactionCommon,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    isExecuted: t.boolean, // true if transaction didn't fail (eg TRX/ETH contract succeeded)\n    isConfirmed: t.boolean,\n    confirmations: t.number, // 0 if not confirmed\n    confirmationId: nullable(t.string), // eg block number or hash. null if not confirmed\n    confirmationTimestamp: nullable(DateT), // block timestamp. null if timestamp unavailable or unconfirmed\n    data: t.UnknownRecord,\n  },\n  'BaseTransactionInfo',\n)\nexport type BaseTransactionInfo = t.TypeOf<typeof BaseTransactionInfo>\n\nexport const BaseBroadcastResult = t.type(\n  {\n    id: t.string,\n  },\n  'BaseBroadcastResult',\n)\nexport type BaseBroadcastResult = t.TypeOf<typeof BaseBroadcastResult>\n"],"names":["t.union","t.string","t.number","FeeLevel","enumCodec","FeeRateType","requiredOptionalCodec","t.literal","t.type","TransactionStatus","nullable","extendCodec","t.UnknownRecord","t.boolean","DateT"],"mappings":";;;;;;QAGa,cAAc,GAAGA,OAAO,CAAC,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE,gBAAgB,CAAC,CAAA;AAG7E,EAAA,WAAY,QAAQ;MAClB,6BAAiB,CAAA;MACjB,uBAAW,CAAA;MACX,6BAAiB,CAAA;MACjB,yBAAa,CAAA;EACf,CAAC,EALWC,gBAAQ,KAARA,gBAAQ,QAKnB;AACD,QAAa,SAAS,GAAGC,kBAAS,CAAWD,gBAAQ,EAAE,UAAU,CAAC,CAAA;AAElE,EAAA,WAAY,WAAW;MACrB,4BAAa,CAAA;MACb,4BAAa,CAAA;MACb,4CAA6B,CAAA;EAC/B,CAAC,EAJWE,mBAAW,KAAXA,mBAAW,QAItB;AACD,QAAa,YAAY,GAAGD,kBAAS,CAAcC,mBAAW,EAAE,aAAa,CAAC,CAAA;AAE9E,QAAa,eAAe,GAAGC,8BAAqB,CAClD;MACE,OAAO,EAAEL,QAAQ;MACjB,WAAW,EAAE,YAAY;GAC1B,EACD;MACE,QAAQ,EAAEM,SAAS,CAACJ,gBAAQ,CAAC,MAAM,CAAC;GACrC,EACD,iBAAiB,CAClB,CAAA;AAED,QAAa,cAAc,GAAGK,MAAM,CAClC;MACE,QAAQ,EAAER,OAAO,CAAC,CAACO,SAAS,CAACJ,gBAAQ,CAAC,IAAI,CAAC,EAAEI,SAAS,CAACJ,gBAAQ,CAAC,MAAM,CAAC,EAAEI,SAAS,CAACJ,gBAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;GACnG,EACD,gBAAgB,CACjB,CAAA;AAED,QAAa,SAAS,GAAGH,OAAO,CAAC,CAAC,eAAe,EAAE,cAAc,CAAC,EAAE,WAAW,CAAC,CAAA;AAGhF,QAAa,wBAAwB,GAAG,SAAS,CAAA;AAGjD,QAAa,iBAAiB,GAAGQ,MAAM,CAAC;MACtC,cAAc,EAAE,SAAS;MACzB,aAAa,EAAEP,QAAQ;MACvB,iBAAiB,EAAE,YAAY;MAC/B,OAAO,EAAEA,QAAQ;MACjB,OAAO,EAAEA,QAAQ;GAClB,CAAC,CAAA;AAGF,QAAa,aAAa,GAAGO,MAAM,CACjC;MACE,gBAAgB,EAAEP,QAAQ;MAC1B,kBAAkB,EAAEA,QAAQ;GAC7B,EACD,eAAe,CAChB,CAAA;AAGD,EAAA,WAAY,iBAAiB;MAC3B,0CAAqB,CAAA;MACrB,sCAAiB,CAAA;MACjB,wCAAmB,CAAA;MACnB,4CAAuB,CAAA;MACvB,sCAAiB,CAAA;EACnB,CAAC,EANWQ,yBAAiB,KAAjBA,yBAAiB,QAM5B;AACD,QAAa,kBAAkB,GAAGL,kBAAS,CAACK,yBAAiB,EAAE,mBAAmB,CAAC,CAAA;AAEnF,QAAa,iBAAiB,GAAGD,MAAM,CACrC;MACE,EAAE,EAAEE,iBAAQ,CAACT,QAAQ,CAAC;MACtB,WAAW,EAAES,iBAAQ,CAACT,QAAQ,CAAC;MAC/B,SAAS,EAAES,iBAAQ,CAACT,QAAQ,CAAC;MAC7B,SAAS,EAAES,iBAAQ,CAACT,QAAQ,CAAC;MAC7B,SAAS,EAAES,iBAAQ,CAACR,QAAQ,CAAC;MAC7B,OAAO,EAAEQ,iBAAQ,CAACR,QAAQ,CAAC;MAC3B,MAAM,EAAEQ,iBAAQ,CAACT,QAAQ,CAAC;MAC1B,GAAG,EAAES,iBAAQ,CAACT,QAAQ,CAAC;MACvB,MAAM,EAAE,kBAAkB;GAC3B,EACD,mBAAmB,CACpB,CAAA;EAGD,MAAM,cAAc,GAAGU,oBAAW,CAChC,iBAAiB,EACjB;MACE,WAAW,EAAEV,QAAQ;MACrB,SAAS,EAAEA,QAAQ;MACnB,SAAS,EAAEC,QAAQ;MACnB,cAAc,EAAE,SAAS;MACzB,aAAa,EAAEQ,iBAAQ,CAACT,QAAQ,CAAC;MACjC,iBAAiB,EAAES,iBAAQ,CAAC,YAAY,CAAC;GAC1C,EACD,gBAAgB,CACjB,CAAA;AAED,QAAa,uBAAuB,GAAGC,oBAAW,CAChD,cAAc,EACd;MACE,MAAM,EAAEJ,SAAS,CAAC,UAAU,CAAC;MAC7B,IAAI,EAAEK,eAAe;GACtB,EACD,yBAAyB,CAC1B,CAAA;AAGD,QAAa,qBAAqB,GAAGD,oBAAW,CAC9C,cAAc,EACd;MACE,MAAM,EAAEJ,SAAS,CAAC,QAAQ,CAAC;MAC3B,EAAE,EAAEN,QAAQ;MACZ,MAAM,EAAEA,QAAQ;MAChB,GAAG,EAAEA,QAAQ;MACb,IAAI,EAAEW,eAAe;GACtB,EACD,uBAAuB,CACxB,CAAA;AAGD,QAAa,mBAAmB,GAAGD,oBAAW,CAC5C,iBAAiB,EACjB;MACE,EAAE,EAAEV,QAAQ;MACZ,MAAM,EAAEA,QAAQ;MAChB,GAAG,EAAEA,QAAQ;MACb,UAAU,EAAEY,SAAS;MACrB,WAAW,EAAEA,SAAS;MACtB,aAAa,EAAEX,QAAQ;MACvB,cAAc,EAAEQ,iBAAQ,CAACT,QAAQ,CAAC;MAClC,qBAAqB,EAAES,iBAAQ,CAACI,cAAK,CAAC;MACtC,IAAI,EAAEF,eAAe;GACtB,EACD,qBAAqB,CACtB,CAAA;AAGD,QAAa,mBAAmB,GAAGJ,MAAM,CACvC;MACE,EAAE,EAAEP,QAAQ;GACb,EACD,qBAAqB,CACtB;;;;;;;;;;;;;;;;;;;;;;;;;;"}