{"version":3,"file":"index.cjs.js","sources":["../src/types.ts"],"sourcesContent":["import * as t from 'io-ts'\nimport { requiredOptionalCodec, extendCodec, enumCodec, nullable, DateT } from '@faast/ts-common'\n\nexport enum NetworkType {\n  Mainnet = 'mainnet',\n  Testnet = 'testnet',\n}\nexport const NetworkTypeT = enumCodec<NetworkType>(NetworkType, 'NetworkType')\n\nexport const BaseConfig = t.partial(\n  {\n    network: NetworkTypeT,\n  },\n  'BaseConfig',\n)\nexport type BaseConfig = t.TypeOf<typeof BaseConfig>\n\nexport const AddressOrIndex = t.union([t.string, t.number], 'AddressOrIndex')\nexport type AddressOrIndex = t.TypeOf<typeof AddressOrIndex>\n\nexport enum FeeLevel {\n  Custom = 'custom',\n  Low = 'low',\n  Medium = 'medium',\n  High = 'high',\n}\nexport const FeeLevelT = enumCodec<FeeLevel>(FeeLevel, 'FeeLevel')\n\nexport enum FeeRateType {\n  Main = 'main', // ie bitcoins, ethers\n  Base = 'base', // ie satoshis, wei\n  BasePerWeight = 'base/weight', // ie satoshis per byte, gas price (wei per gas)\n}\nexport const FeeRateTypeT = enumCodec<FeeRateType>(FeeRateType, 'FeeRateType')\n\nexport const FeeOptionCustom = requiredOptionalCodec(\n  {\n    feeRate: t.string,\n    feeRateType: FeeRateTypeT,\n  },\n  {\n    feeLevel: t.literal(FeeLevel.Custom),\n  },\n  'FeeOptionCustom',\n)\n\nexport const FeeOptionLevel = t.type(\n  {\n    feeLevel: t.union([t.literal(FeeLevel.High), t.literal(FeeLevel.Medium), t.literal(FeeLevel.Low)]),\n  },\n  'FeeOptionLevel',\n)\n\nexport const FeeOption = t.union([FeeOptionCustom, FeeOptionLevel], 'FeeOption')\nexport type FeeOption = t.TypeOf<typeof FeeOption>\n\nexport const CreateTransactionOptions = FeeOption\nexport type CreateTransactionOptions = t.TypeOf<typeof CreateTransactionOptions>\n\nexport const ResolvedFeeOption = t.type({\n  targetFeeLevel: FeeLevelT,\n  targetFeeRate: t.string,\n  targetFeeRateType: FeeRateTypeT,\n  feeBase: t.string,\n  feeMain: t.string,\n})\nexport type ResolvedFeeOption = t.TypeOf<typeof ResolvedFeeOption>\n\nexport const BalanceResult = t.type(\n  {\n    confirmedBalance: t.string, // balance with at least 1 confirmation\n    unconfirmedBalance: t.string, // balance that is pending confirmation\n  },\n  'BalanceResult',\n)\nexport type BalanceResult = t.TypeOf<typeof BalanceResult>\n\nexport enum TransactionStatus {\n  Unsigned = 'unsigned',\n  Signed = 'signed',\n  Pending = 'pending',\n  Confirmed = 'confirmed',\n  Failed = 'failed',\n}\nexport const TransactionStatusT = enumCodec(TransactionStatus, 'TransactionStatus')\n\nexport const TransactionCommon = t.type(\n  {\n    id: nullable(t.string), // network txid\n    fromAddress: nullable(t.string), // sender address\n    toAddress: nullable(t.string), // recipient address\n    toExtraId: nullable(t.string), // eg Monero payment ID\n    fromIndex: nullable(t.number), // sender address index\n    toIndex: nullable(t.number), // recipient address index, null if not ours\n    amount: nullable(t.string), // main denomination (eg \"0.125\")\n    fee: nullable(t.string), // total fee in main denomination\n    status: TransactionStatusT,\n  },\n  'TransactionCommon',\n)\nexport type TransactionCommon = t.TypeOf<typeof TransactionCommon>\n\nconst UnsignedCommon = extendCodec(\n  TransactionCommon,\n  {\n    fromAddress: t.string,\n    toAddress: t.string,\n    fromIndex: t.number,\n    targetFeeLevel: FeeLevelT,\n    targetFeeRate: nullable(t.string),\n    targetFeeRateType: nullable(FeeRateTypeT),\n  },\n  'UnsignedCommon',\n)\n\nexport const BaseUnsignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal('unsigned'),\n    data: t.object,\n  },\n  'BaseUnsignedTransaction',\n)\nexport type BaseUnsignedTransaction = t.TypeOf<typeof BaseUnsignedTransaction>\n\nexport const BaseSignedTransaction = extendCodec(\n  UnsignedCommon,\n  {\n    status: t.literal('signed'),\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    data: t.object,\n  },\n  'BaseSignedTransaction',\n)\nexport type BaseSignedTransaction = t.TypeOf<typeof BaseSignedTransaction>\n\nexport const BaseTransactionInfo = extendCodec(\n  TransactionCommon,\n  {\n    id: t.string,\n    amount: t.string,\n    fee: t.string,\n    isExecuted: t.boolean, // true if transaction didn't fail (eg TRX/ETH contract succeeded)\n    isConfirmed: t.boolean,\n    confirmations: t.number, // 0 if not confirmed\n    confirmationId: nullable(t.string), // eg block number or hash. null if not confirmed\n    confirmationTimestamp: nullable(DateT), // block timestamp. null if timestamp unavailable or unconfirmed\n    data: t.object,\n  },\n  'BaseTransactionInfo',\n)\nexport type BaseTransactionInfo = t.TypeOf<typeof BaseTransactionInfo>\n\nexport const BaseBroadcastResult = t.type(\n  {\n    id: t.string,\n  },\n  'BaseBroadcastResult',\n)\nexport type BaseBroadcastResult = t.TypeOf<typeof BaseBroadcastResult>\n"],"names":["NetworkType","enumCodec","t.partial","t.union","t.string","t.number","FeeLevel","FeeRateType","requiredOptionalCodec","t.literal","t.type","TransactionStatus","nullable","extendCodec","t.object","t.boolean","DateT"],"mappings":"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"}